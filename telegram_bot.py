import asyncio
import logging
import aiogram
import re
from aiogram.filters.command import Command, CommandStart

#from config_reader import config

logging.basicConfig(level=logging.INFO)
#bot = aiogram.Bot(token=config.bot_token.get_secret_value())
bot = aiogram.Bot(token="1417403958:AAHzkxdVS3AtrKl74w1186iSbzFNCDi5n38")

dp = aiogram.Dispatcher()

global isStartDate
global isPeriodDur
global isCycleDur
isStartDate = False
isPeriodDur = False
isCycleDur = False

@dp.message(Command("start"))
async def cmd_start(message: aiogram.types.Message):
    await message.answer("–≠—Ç–æ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ–º–æ–≥–∞–µ—Ç: \nüå∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å —Ü–∏–∫–ª–∞\nüå∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –æ–∂–∏–¥–∞–µ–º—ã—Ö –º–µ—Å—è—á–Ω—ã—Ö –∏ –¥–Ω–∏ –æ–≤—É–ª—è—Ü–∏–∏\nüå∏ –ø–æ–º–æ—á—å –≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ –ø—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö –º–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω–æ–≥–æ —Ü–∏–∫–ª–∞\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤\n–î–ª—è –ø–æ–º–æ—â–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help")
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏:\n<i>{"(–í —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥)"}</i>",
        parse_mode=aiogram.enums.ParseMode.HTML)
    global isStartDate
    isStartDate = True


@dp.message(Command("addinfo"))
async def addinfo(message: aiogram.types.Message):
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–∏–æ–¥–∞:\n<i>{"(–¢–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π)"}</i>",
        parse_mode=aiogram.enums.ParseMode.HTML)
    global isPeriodDur
    isPeriodDur = True

@dp.message(Command("help"))
async def help(message: aiogram.types.Message):
    await message.answer(f"–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n\n<b>/info</b> - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º —Ü–∏–∫–ª–µ\n<b>/calendar</b> - –∫–∞–ª–µ–Ω–¥–∞—Ä—å\n<b>/adddataperiod</b> - –æ—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—á–∞–ª–æ –∏–ª–∏ –∫–æ–Ω–µ—Ü —Ü–∏–∫–ª–∞\n<b>/addinfo</b> - –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–∏–∫–ª–µ",
        parse_mode=aiogram.enums.ParseMode.HTML)

@dp.message(Command("adddataperiod"))
async def adddataperiod(message: aiogram.types):
    kb = [
        [
            aiogram.types.KeyboardButton(text="–ù–∞—á–∞–ª–æ"),
            aiogram.types.KeyboardButton(text="–ö–æ–Ω–µ—Ü")
        ],
    ]
    keyboard = aiogram.types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–û—Ç–º–µ—Ç—å—Ç–µ –Ω–∞—á–∞–ª–æ –∏–ª–∏ –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞"
    )
    await message.answer("–ù–∞—á–∞–ª–æ –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏?", reply_markup=keyboard)

@dp.message(aiogram.F.text.lower() == "–Ω–∞—á–∞–ª–æ")
async def with_puree(message: aiogram.types.Message):
    await message.reply("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

@dp.message(aiogram.F.text.lower() == "–∫–æ–Ω–µ—Ü")
async def without_puree(message: aiogram.types.Message):
    await message.reply("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

@dp.message(aiogram.F.text)
async def info_last_day(message: aiogram.types.Message):
    global isStartDate
    global isPeriodDur
    global isCycleDur
    if (isStartDate):
        format = r'\d\d-\d\d-\d{4}'
        if (not re.match(format, message.text)):
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞")
        else:
            await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–∏–æ–¥–∞:\n<i>{"(–¢–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π)"}</i>",
                parse_mode=aiogram.enums.ParseMode.HTML)
            isStartDate = False
            isPeriodDur = True
    elif (isPeriodDur):
        if (not message.text.isdigit()):
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞")
        else:
            isPeriodDur = False
            isCycleDur = True
            await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ü–∏–∫–ª–∞:\n<i>{"(–¢–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π)"}</i>",
                parse_mode=aiogram.enums.ParseMode.HTML)
    elif (isCycleDur):
        if(not message.text.isdigit()):
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞")
        else:
            isCycleDur = False
            await message.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")



"""
@dp.message(Command("dice"))
async def cmd_dice(message: aiogram.types.Message):
    await message.answer_dice(emoji="üèÄ")
    print(message.from_user.full_name, message.from_user.url)

@dp.message(aiogram.F.text, Command("test"))
async def any_message(message: aiogram.types.Message):
    await message.answer(
        "Hello, <b>world</b>!",
        parse_mode=aiogram.enums.ParseMode.HTML
    )
    await message.answer(
        "Hello, *world*\!",
        parse_mode=aiogram.enums.ParseMode.MARKDOWN_V2
    )
"""
# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())