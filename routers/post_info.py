import re
import aiogram
from aiogram.filters.command import Command, CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder
#from apscheduler.schedulers.asyncio import AsyncIOScheduler
import my_token

from .bd import create_user_users, add_info_period, add_info_cycle, db_start

router = aiogram.Router()


global isStartDate
global isPeriodDur
global isCycleDur
isStartDate = False
isPeriodDur = False
isCycleDur = False

# scheduler = AsyncIOScheduler(timezone='utc')
bot = aiogram.Bot(token=my_token.my_token)
async def remind():
    await bot.send_message(chat_id=954353874, text="–•–µ–πüññ –Ω–µ –∑–∞–±—É–¥—å –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ–π —É–∂–∏–Ω —Å–µ–≥–æ–¥–Ω—è")


# –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–∏–ª–∏ –µ–µ —Å–æ–∑–¥–∞–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
async def on_startup(_):
    await db_start()


# –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
@router.message(Command("start"))
async def cmd_start(message: aiogram.types.Message):
    builder = InlineKeyboardBuilder()
    builder.add(aiogram.types.InlineKeyboardButton(
        text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        callback_data="addstartinfo")
    )
    await create_user_users(message.from_user.id)
    await message.answer("–≠—Ç–æ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ–º–æ–≥–∞–µ—Ç: \nüå∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å —Ü–∏–∫–ª–∞\nüå∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –æ–∂–∏–¥–∞–µ–º—ã—Ö –º–µ—Å—è—á–Ω—ã—Ö –∏ –¥–Ω–∏ –æ–≤—É–ª—è—Ü–∏–∏\nüå∏ –ø–æ–º–æ—á—å –≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ –ø—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö –º–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω–æ–≥–æ —Ü–∏–∫–ª–∞\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤\n–î–ª—è –ø–æ–º–æ—â–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help")
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏:\n<i>{'(–í —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥)'}</i>",
        parse_mode=aiogram.enums.ParseMode.HTML, reply_markup=builder.as_markup())
    global isStartDate
    isStartDate = True
    #scheduler.add_job(remind(), 'cron', day_of_week='mon-sun', hour=13, minute=50, end_date='3025-10-13')


@router.callback_query(aiogram.F.data == "addstartinfo")
async def send_random_value(callback: aiogram.types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(aiogram.types.InlineKeyboardButton(
        text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        callback_data="addperiodinfo")
    )
    global isStartDate
    global isPeriodDur
    isStartDate = False
    isPeriodDur = True
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–∏–æ–¥–∞:\n<i>{'(–¢–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π)'}</i>",
        parse_mode=aiogram.enums.ParseMode.HTML, reply_markup=builder.as_markup())


@router.callback_query(aiogram.F.data == "addperiodinfo")
async def send_random_value(callback: aiogram.types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(aiogram.types.InlineKeyboardButton(
        text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        callback_data="addcycleinfo")
    )
    global isPeriodDur
    global isCycleDur
    isPeriodDur = False
    isCycleDur = True
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ü–∏–∫–ª–∞:\n<i>{'(–¢–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π)'}</i>",
        parse_mode=aiogram.enums.ParseMode.HTML, reply_markup=builder.as_markup())


@router.callback_query(aiogram.F.data == "addcycleinfo")
async def send_random_value(callback: aiogram.types.CallbackQuery):
    global isCycleDur
    isCycleDur = False
    await callback.message.answer("–î–ª—è –ø–æ–º–æ—â–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help")


# –≤–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–∏–∫–ª–µ
@router.message(Command("addinfo"))
async def addinfo(message: aiogram.types.Message):
    builder = InlineKeyboardBuilder()
    builder.add(aiogram.types.InlineKeyboardButton(
        text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        callback_data="addperiodinfo")
    )
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–∏–æ–¥–∞:\n<i>{'(–¢–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π)'}</i>",
        parse_mode=aiogram.enums.ParseMode.HTML, reply_markup=builder.as_markup())
    global isPeriodDur
    isPeriodDur = True


# –≤–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
@router.message(aiogram.F.text)
async def info_last_day(message: aiogram.types.Message):
    global isStartDate
    global isPeriodDur
    global isCycleDur
    if (isStartDate):
        builder = InlineKeyboardBuilder()
        builder.add(aiogram.types.InlineKeyboardButton(
            text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
            callback_data="addperiodinfo")
        )
        format = r'\d\d.\d\d.\d{4}'
        if (not re.match(format, message.text)):
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞")
        else:
            #–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –≤ –±–¥
            await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–∏–æ–¥–∞:\n<i>{'(–¢–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π)'}</i>",
                parse_mode=aiogram.enums.ParseMode.HTML, reply_markup=builder.as_markup())
            isStartDate = False
            isPeriodDur = True
    elif (isPeriodDur):
        builder = InlineKeyboardBuilder()
        builder.add(aiogram.types.InlineKeyboardButton(
            text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
            callback_data="addcycleinfo")
        )
        if (not message.text.isdigit()):
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞")
        else:
            #–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –≤ –±–¥
            isPeriodDur = False
            isCycleDur = True
            await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ü–∏–∫–ª–∞:\n<i>{'(–¢–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π)'}</i>",
                parse_mode=aiogram.enums.ParseMode.HTML, reply_markup=builder.as_markup())
            await add_info_period(user_id=message.from_user.id, period_length=message.text)
    elif (isCycleDur):
        if(not message.text.isdigit()):
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞")
        else:
            #–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–∏–∫–ª–∞ –≤ –±–¥
            isCycleDur = False
            await message.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\n\n–î–ª—è –ø–æ–º–æ—â–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help")
            await add_info_cycle(user_id=message.from_user.id, cycle_length=message.text)
